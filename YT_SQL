#Transaction_tbl has 4 columns- CustID, TranID, TranAmt and TranDate.
#User has to display all these fields along with maximum TranAmt for each CustID and ratio of TranAmt and Maximum TranAmt for each transaction

#Using Subquery

SELECT A.CustID, 
        A.TranID, 
        A.TranAmt, 
        B.MaxTranAmt, 
        A.TranDate, 
        (A.TranAmt/B.MaxTranAmt) AS Ratio
  FROM Transaction_Tbl A
  INNER JOIN
  (
    SELECT CustID, MAX(TranAmt) AS MaxTranAmt
      FROM Transaction_Tbl
      GROUP BY CustID
      )B
  ON A.CustID = B.CustID;

#Using CTE

WITH CTE(CustID, TranID, TranAmt, TranDate) AS
(
        SELECT CustID, TranID, TranAmt, MaxTranAmt, TranDate
                FROM Transaction_Tbl
                ),
WITH CTE_MaxTran(CustID, MaxTranAmt) AS(
                                                SELECT CustID, MAX(TranAmt) as MaxTranAmt
                                                        FROM Transaction_Tbl
                                                        GROUP BY CustID
                                                )
SELECT A.CustID, 
        A.TranID, 
        A.TranAmt, 
        B.MaxTranAmt, 
        A.TranDate, 
        (A.TranAmt/B.MaxTranAmt) AS Ratio                                           
   FROM CTE A
   INNER JOIN CTE_MaxTran B
   ON A.CustID = B.CustID;

# EMP - Group, Sequence
# Output - Group, Min_Seq, Max_Seq

        Group   Sequence
  1     A       1
  2     A       2
  3     A       3
  4     A       5
  5     A       6
  6     A       8
  7     A       9
  8     B       11
  9     C       1
  10    C       2
  11    C       3
  
  
  OUTPUT -
  
        Group   Min_Seq         Max_Seq
    1   A       1               3
    2   A       5               6
    3   A       8               9
    4   B       11              11
    5   c       1               3
    
    Step 1 -
    
    SELECT Group,
           Sequence,
           ROW_NUMBER() OVER(PARTITION BY Group ORDER BY Sequence) AS rnk
    FROM EMP;
    
        Group   Sequence        rnk
     1     A       1            1
     2     A       2            2
     3     A       3            3
     4     A       5            4
     5     A       6            5
     6     A       8            6
     7     A       9            7
     8     B       11           1
     9     C       1            1
     10    C       2            2
     11    C       3            3
     
     Step 2 -
     
    SELECT Group,
           Sequence,
           ROW_NUMBER() OVER(PARTITION BY Group ORDER BY Sequence) AS rnk,
           Sequence - ROW_NUMBER() OVER(PARTITION BY Group ORDER BY Sequence) AS split
        FROM EMP;
        
        
        Group   Sequence       rnk      split
     1     A       1            1         0
     2     A       2            2         0
     3     A       3            3         0
     4     A       5            4         1
     5     A       6            5         1
     6     A       8            6         2
     7     A       9            7         2
     8     B       11           1         10
     9     C       1            1         0
     10    C       2            2         0
     11    C       3            3         0
     
     #FINAL
     
     SELECT Group,
            MIN(Sequence) AS MIN_Seq
            MAX(Sequence) AS MAX_Seq
        FROM
           (
            SELECT Group, 
                   Sequence,
                   Sequence - ROW_NUMBER() OVER(PARTITION BY Group ORDER BY Sequence) AS grp_split
                FROM EMP)
        GROUP BY Group, Split
        ORDER BY Group;

#Student table has 3 columns - student_name, total_marks, year
#User has to write a SQL query to display student_name, total_marks, year, prev_yr_marks for those whose total_marks are greater than or equal to previous year

INPUT - SELECT * FROM Student;

        Student_Name    Total_Marks     Year
  1     Rahul           90              2010
  2     Sanjay          80              2010
  3     Mohan           70              2010
  4     Rahul           90              2011
  5     Sanjay          85              2011
  6     Mohan           65              2011
  7     Rahul           80              2012
  8     Sanjay          80              2012
  9     Mohan           90              2012
  
  OUTPUT -
  
  Student_Name  Total_Marks     Year    Prev_Yr_Marks
  Rahul         90              2011    90
  Sanjay        85              2011    80
  Mohan         90              2012    65
  
  STEP - 1
  
  SELECT Student_Name, 
         Year, 
         Total_Marks,
         LAG(Total_Marks) OVER(PARTITION BY Student_Name ORDER BY Year) AS Prev_Yr_Marks
  FROM Student;
  
        Student_Name          Year            Total_Marks     Prev_Yr_Marks
   1    Mohan                   2010            70              NULL
   2    Mohan                   2011            65              70
   3    Mohan                   2012            90              65
   4    Rahul                   2010            90              NULL
   5    Rahul                   2011            90              90
   6    Rahul                   2012            80              90     
   7    Sanjay                  2010            80              NULL
   8    Sanjay                  2011            85              80
   9    Sanjay                  2012            80              85
  
  STEP 2 -
  
  SELECT Student_Name,
         Year,
         Total_Marks,
         Prev_Yr_Marks,
         CASE WHEN Total_Marks >= Prev_Yr_Marks THEN 1 ELSE 0 END AS Flag
  FROM
  (
    SELECT Student_Name, 
         Year, 
         Total_Marks,
         LAG(Total_Marks) OVER(PARTITION BY Student_Name ORDER BY Year) AS Prev_Yr_Marks
        FROM Student
        )A
        
  
        Student_Name          Year            Total_Marks     Prev_Yr_Marks     Flag
   1    Mohan                   2010            70              NULL            0
   2    Mohan                   2011            65              70              0
   3    Mohan                   2012            90              65              1
   4    Rahul                   2010            90              NULL            0
   5    Rahul                   2011            90              90              1
   6    Rahul                   2012            80              90              0
   7    Sanjay                  2010            80              NULL            0
   8    Sanjay                  2011            85              80              1
   9    Sanjay                  2012            80              85              0
   
   #Final Step -
   
  SELECT Student_Name,
         Total_Marks,
         Year,
         Prev_Yr_Marks
     FROM
     (
        SELECT Student_Name,
                Year,
                Total_Marks,
                Prev_Yr_Marks,
                CASE WHEN Total_Marks >= Prev_Yr_Marks THEN 1 ELSE 0 END AS Flag
            FROM
            (
                SELECT Student_Name, 
                        Year, 
                        Total_Marks,
                        LAG(Total_Marks) OVER(PARTITION BY Student_Name ORDER BY Year) AS Prev_Yr_Marks
                     FROM Student
                )A
           )B
           WHERE Flag = 1;

#Product's Price for each store

#Products Table

Product_id      Store           Price
0               Store 1         95
0               Store 3         105
0               Store 2         100
1               Store 1         70
1               Store 3         80

#Output

Product_id      Store1          Store2          Store3
0               95              100             105
1               70              Null            80

SELECT P1.Product_id.
        P2.Price AS Store1,
        P3.Price AS Store2,
        p4.Price AS Store3
   FROM Products P1
   LEFT JOIN Products P2 ON P1.product_id = P2.product_id AND P2.Store = 'Store1'
   LEFT JOIN Products P3 ON P1.product_id = P3.product_id AND P2.Store = 'Store2'
   LEFT JOIN Products P4 ON P1.product_id = P4.product_id AND P4.Store = 'Store3'
   GROUP BY P1.Product_id
   ORDER BY P1.Product_id;

((OR))

SELECT Product_id,
        MAX(CASE WHEN store ='Store1' THEN Price END)AS Store1,
        MAX(CASE WHEN store ='Store2' THEN Price END)AS Store2,
        MAX(CASE WHEN store ='Store3' THEN Price END)AS Store3
   FROM Products P
   GROUP BY product_id
   ORDER BY Product_id;

#Using Pivot function. This works only in MS SQL SERVER

SELECT Product_id, [Store1], [Store2], [Store3]
        FROM Products
        PIVOT(
                MAX(Price)
                FOR Store IN ([Store1], [Store2], [Store3])
                )AS PivotTable
