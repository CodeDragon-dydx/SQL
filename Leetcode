- Combine Two Tables
  Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:
  FirstName, LastName, City, State
  
  SELECT P.FirstName,
         P.LastName,
         A.City,
         A.State
    FROM Person P
    LEFT JOIN Address A
    ON P.PersonID = A.PersonID;
    
    
- Employee Bonus
  Select all employee's name and bonus whose bonus is < 1000
  
  SELECT E.name,
         B.bonus
    FROM Employee E
    LEFT JOIN Bonus B
    ON E.empID = B.empID
    WHERE B.bonus is null or B.bonus < 1000;
    
    
- Second Highest Salary
  Write a SQL query to get the second highest salary from the Employee table.
  
  SELECT MAX(Salary) AS SecondHighestSalary
    FROM Employee
    WHERE Salary < (
                        SELECT MAX(Salary)
                            FROM Employee
                    );
                    
                    ((OR))
                    
 SELECT 
    IFNULL(
            (SELECT DISTINCT Salary
                FROM Employee
                ORDER BY Salary Desc
                LIMIT 1 OFFSET 1),
                NULL
            ) AS SecondHighestSalary
            
            
- Nth Highest Salary
  Write a SQL query to get the nth highest salary from the Employee table.
  
  CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
    BEGIN
    RETURN (
              SELECT DISTINCT SALARY
                  FROM
                      (
                        SELECT Salary,
                                DENSE_RANK() OVER (ORDER BY SALARY DESC) AS RK
                            FROM Employee
                        )T
             WHERE RK = N
          );
  END


            ((OR))
            
  CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
  BEGIN
  SET N=N-1;
  RETURN (
            SELECT IFNULL
            (
                (
                    SELECT DISTINCT Salary 
                      FROM Employee 
                      ORDER BY Salary DESC LIMIT 1 OFFSET N
                ), NULL
              )              
       );
  END
  
- Recyclable and Low Fat Products
  Write an SQL query to find the ids of products that are both low fat and recyclable.
  
  SELECT product_id
    FROM Products
    WHERE low_fats = 'Y'
    AND recyclable = 'Y';

- Find Total Time Spent by Each Employee
  Write an SQL query to calculate the total time in minutes spent by each employee on each day at the office. 
  Note that within one day, an employee can enter and leave more than once. 
  The time spent in the office for a single entry is out_time - in_time.
  
  SELECT event_day AS day,
       emp_id,
       SUM(out_time - in_time) AS total_time
    FROM Employees
    GROUP BY day, emp_id;
    
- Daily Leads and Partners

  SELECT date_id, 
       make_name,
       count(DISTINCT lead_id) AS unique_leads,
       count(DISTINCT partner_id) AS unique_partners
    FROM DailySales
    GROUP BY date_id, make_name;
    
- Invalid Tweets
  SELECT tweet_id 
    FROM Tweets
    WHERE LENGTH(content) > 15;
    
- Students With Invalid Departments
  Write an SQL query to find the id and the name of all students who are enrolled in departments that no longer exists.
  
  SELECT ID,Name
    FROM Students
    WHERE department_id NOT IN
    (
        SELECT DISTINCT ID
            FROM Departments
    );
    
    ((OR))
    
  SELECT S.ID,
       S.Name
    FROM Students S
    LEFT JOIN Departments D
    on S.Department_ID = D.ID
    where D.ID IS NULL;
    
- Replace Employee ID With The Unique Identifier
  Write an SQL query to show the unique ID of each user, If a user doesn't have a unique ID replace just show null.
  
  SELECT EUNI.unique_id, E.name
    FROM EmployeeUNI as EUNI
    RIGHT JOIN Employees E
    ON E.id = EUNI.id;

- Bank Account Summary II
  Write an SQL query to report the name and balance of users with a balance higher than 10000. 
  The balance of an account is equal to the sum of the amounts of all transactions involving that account.
  
  SELECT U.Name, SUM(T.Amount) AS balance
    FROM Transactions T
    INNER JOIN Users U
    ON T.Account = U.Account
    GROUP BY U.Name
    HAVING balance > 10000;
- Warehouse Manager
  Write an SQL query to report, How much cubic feet of volume does the inventory occupy in each warehouse.

    warehouse_name
    volume
    
  SELECT W.Name AS WAREHOUSE_NAME,
       SUM(W.Units*P.Width*P.Length*P.Height) as VOLUME
       FROM Warehouse W
       INNER JOIN Products P
       ON W.Product_ID = P.Product_ID
       Group BY W.Name;
       
- Customer Who Visited but Did Not Make Any Transactions
  Write an SQL query to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.
  
  SELECT V.customer_id, COUNT(V.VISIT_ID) AS count_no_trans
    FROM Visits V
    LEFT JOIN Transactions T
    ON V.Visit_ID = T.Visit_ID
    WHERE T.VISIT_id IS NULL
    GROUP BY V.Customer_ID
    
  - Find the Team Size
    Write an SQL query to find the team size of each of the employees.
    
    SELECT employee_id,
        COUNT(team_id) OVER(PARTITION BY team_id) AS team_size 
      FROM Employee
      GROUP BY employee_id;
      
      
      ((OR))
     
     SELECT a.employee_id,
        t.team_size
      FROM Employee a
      LEFT JOIN (SELECT team_id, count(*) as team_size
                  FROM Employee
                  GROUP BY team_id
                  )t
      ON a.team_id = t.team_id; 

- All Valid Triplets That Can Represent a Country
  There is a country with three schools, where each student is enrolled in exactly one school. The country is joining a competition and wants to select one student from each school to represent the country such that:

  member_A is selected from SchoolA,
  member_B is selected from SchoolB,
  member_C is selected from SchoolC, and
  The selected students' names and IDs are pairwise distinct (i.e. no two students share the same name, and no two students share the same ID).
  Write an SQL query to find all the possible triplets representing the country under the given constraints.
  
  SELECT a.student_name AS member_A,
        b.student_name AS member_B,
        c.student_name AS member_C
    FROM SchoolA a
        CROSS JOIN SchoolB b
        CROSS JOIN SchoolC c
    WHERE a.student_name != b.student_name
    AND a.student_name != c.student_name
    AND b.student_name != c.student_name
    AND a.student_id != b.student_id
    AND a.student_id != c.student_id
    AND b.student_id != c.student_id;

- Product's Price for Each Store
  Write an SQL query to find the price of each product in each store.
  
  select product_id,
       sum(if(store='store1', price, null)) as store1,
       sum(if(store='store2', price, null)) as store2,
       sum(if(store='store3', price, null)) as store3
    from products
    group by product_id;
    
      ((or))
      
    SELECT p1.product_id,
        p2.price as store1,
        p3.price as store2,
        p4.price as store3
    FROM Products p1 
    LEFT JOIN Products p2 on p1.product_id = p2.product_id and p2.store = 'store1'
    LEFT JOIN Products p3 on p1.product_id = p3.product_id and p3.store = 'store2'
    LEFT JOIN Products p4 on p1.product_id = p4.product_id and p4.store = 'store3'
    GROUP BY product_id
    ORDER BY product_id;
    
- Rearrange Products Table
  Write an SQL query to rearrange the Products table so that each row has (product_id, store, price). 
  If a product is not available in a store, do not include a row with that product_id and store combination in the result table. 
  
  (
    SELECT product_id, 'store1' AS store, store1 AS price
        FROM Products
        WHERE store1 IS NOT NULL
    )
UNION
(
    SELECT product_id, 'store2' AS store, store2 AS price
        FROM Products
        WHERE store2 IS NOT NULL
    )
UNION
(
    SELECT product_id, 'store3' AS store, store3 AS price
        FROM Products
        WHERE store3 IS NOT NULL
    )
ORDER BY 1,2;

    
- Group Sold Products By The Date

  Write an SQL query to find for each date, the number of distinct products sold and their names.
  The sold-products names for each date should be sorted lexicographically. 
  Return the result table ordered by sell_date.
  The query result format is in the following example.
  
  SELECT sell_date,
        COUNT(DISTINCT product) AS num_sold,
        GROUP_CONCAT(DISTINCT product 
                     ORDER BY product) AS products
    FROM Activities
    GROUP BY sell_date
    ORDER BY sell_date;

- Top Travellers
   Write an SQL query to report the distance travelled by each user.

    Return the result table ordered by travelled_distance in descending order, if two or more users travelled the same distance, order them by their name in ascending order.
    
    SELECT  u.name,
        IFNULL(SUM(R.distance),0) as travelled_distance
        FROM Users u
        LEFT JOIN Rides r
        ON u.id = r.user_id
        GROUP BY u.name
        ORDER BY travelled_distance DESC, 
                    u.name;
                    
                    ((OR))
                    
     SELECT  u.name,
        CASE WHEN SUM(R.distance) IS NOT NULL
            THEN SUM(R.distance)
            ELSE 0
            END AS travelled_distance
        FROM Users u
        LEFT JOIN Rides r
        ON u.id = r.user_id
        GROUP BY u.name
        ORDER BY travelled_distance DESC, 
                    u.name;
  
- Product Sales Analysis II
  Write an SQL query that reports the total quantity sold for every product id.
  
  SELECT S.product_id,
        SUM(S.quantity) as total_quantity
    FROM Sales S
    INNER JOIN Product P
    ON S.product_id = P.product_id
    GROUP BY S.product_id;
    
- Unique Orders and Customers Per Month

  Write an SQL query to find the number of unique orders and the number of unique customers with invoices > $20 for each different month.
  Return the result table sorted in any order.
  
  SELECT DATE_FORMAT(order_date, '%Y-%m') AS month,
        COUNT(DISTINCT order_id) AS order_count,
        COUNT(DISTINCT customer_id) AS customer_count
    FROM Orders
    WHERE invoice > 20
    GROUP BY month;
    
    ((OR))
    
    SELECT SUBSTRING(order_date, 1,7) AS month,
        COUNT(DISTINCT order_id) AS order_count,
        COUNT(DISTINCT customer_id) AS customer_count
      FROM Orders
      WHERE invoice > 20
      GROUP BY month;

- Average Selling Price

  Write an SQL query to find the average selling price for each product.
  average_price should be rounded to 2 decimal places.
  
  SELECT P.product_id, 
    ROUND(SUM(U.units*P.price)/ SUM(U.units),2) AS average_price
    FROM Prices P
    INNER JOIN UnitsSold U
    ON P.product_id = U.product_id 
        AND U.purchase_date BETWEEN P.start_date AND P.end_date
    GROUP BY P.product_id;
    
- Immediate Food Delivery I

  If the preferred delivery date of the customer is the same as the order date then the order is called immediate otherwise it's called scheduled.
  Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal places.
  
  SELECT ROUND(
                (
                        (
                            COUNT(*)*100)/(SELECT COUNT(*) FROM Delivery
                          )
                  )
            , 2) AS immediate_percentage
      FROM Delivery 
      WHERE order_date = customer_pref_delivery_date;
      

  SELECT ROUND((immediate*100)/total, 2) AS immediate_percentage
    FROM
        (
            SELECT COUNT(delivery_id) as immediate 
                FROM Delivery
                WHERE order_date = customer_pref_delivery_date
        ) AS temp1,
        (
            SELECT COUNT(delivery_id) as total 
                FROM Delivery
        ) AS temp2;

- Product Sales Analysis I

  Write an SQL query that reports the product_name, year, and price for each sale_id in the Sales table.
  
  SELECT product_name, year, price
    FROM
    (
        SELECT S.sale_id, P.product_name, S.year, S.price
            FROM Sales S
            INNER JOIN Product P
            ON S.product_id = P.product_id
        ) AS A;
        
        ((or))
   SELECT P.product_name, S.year, S.price
      FROM Sales S
      INNER JOIN Product P
        ON S.product_id = P.product_id;

- Reformat Department Table
  Write an SQL query to reformat the table such that there is a department id column and a revenue column for each month.

//MS SQL Server Solution

  SELECT ID, Jan AS Jan_Revenue,
              Feb AS Feb_Revenue,
              Mar AS Mar_Revenue,
              Apr AS Apr_Revenue,
              May AS May_Revenue,
              Jun AS Jun_Revenue,
              Jul AS Jul_Revenue,
              Aug AS Aug_Revenue,
              Sep AS Sep_Revenue,
              Oct AS Oct_Revenue,
              Nov AS Nov_Revenue,
              Dec AS Dec_Revenue
      FROM Department
      PIVOT
      (
          SUM(revenue)
          FOR month
          IN ([Jan],[Feb],[Mar],[Apr],[May],[Jun],[Jul],[Aug],[Sep],[Oct],[Nov],[Dec])
          ) AS PivotTable;
        
        ((or))
    
    SELECT ID, 
        SUM(IF(month = 'Jan', revenue, null)) AS Jan_Revenue,
        SUM(IF(month = 'Feb', revenue, null)) AS Feb_Revenue,
        SUM(IF(month = 'Mar', revenue, null)) AS Mar_Revenue,
        SUM(IF(month = 'Apr', revenue, null)) AS Apr_Revenue,
        SUM(IF(month = 'May', revenue, null)) AS May_Revenue,
        SUM(IF(month = 'Jun', revenue, null)) AS Jun_Revenue,
        SUM(IF(month = 'Jul', revenue, null)) AS Jul_Revenue,
        SUM(IF(month = 'Aug', revenue, null)) AS Aug_Revenue,
        SUM(IF(month = 'Sep', revenue, null)) AS Sep_Revenue,
        SUM(IF(month = 'Oct', revenue, null)) AS Oct_Revenue,
        SUM(IF(month = 'Nov', revenue, null)) AS Nov_Revenue,
        SUM(IF(month = 'Dec', revenue, null)) AS Dec_Revenue
    FROM Department
    GROUP BY ID;
