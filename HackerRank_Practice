- Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

select NAME from CITY 
where COUNTRYCODE = 'USA' and POPULATION > 120000

- Query all columns (attributes) for every row in the CITY table.

select * from CITY

- Query all columns for a city in CITY with the ID 1661.

select * from CITY where ID = 1661

- Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

select * from CITY where COUNTRYCODE = 'JPN'

- Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.

select NAME from CITY where COUNTRYCODE = 'JPN'

- Query a list of CITY and STATE from the STATION table.

select CITY, STATE from STATION

- Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

select distinct CITY from STATION where ID%2 = 0

- Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

select count(CITY) - count(distinct CITY) from STATION

- Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). 
  If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

-
select CITY, length(CITY)
    from STATION
    order by length(CITY), CITY limit 1;
    
select CITY, length(CITY)
    from STATION
    order by length(CITY) desc, CITY asc limit 1;
    
    (OR)
    
    ****ORACLE***
    
    select * from
    (
      select CITY, length(CITY)
        from STATION
        order by length(CITY), CITY) 
       where ROWNUM = 1
            union
    select * from 
    (
      select CITY, length(CITY)
        from STATION
        order by length(CITY) desc, CITY) 
       where ROWNUM = 1;

- Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY,1,1)) in ('a','e','i','o','u')

- Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY, -1, 1) in ('a','e','i','o','u'))

- Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY,1,1)) in ('a','e','i','o','u') and lower(substring(CITY,-1,1)) in ('a','e','i','o','u')

- Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY,1,1)) not in ('a','e','i','o','u')

- Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY,-1,1)) not in ('a','e','i','o','u') 

- Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY,1,1)) not in ('a','e','i','o','u') or lower(substring(CITY,-1,1)) not in ('a','e','i','o','u')

- Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY,1,1)) not in ('a','e','i','o','u') and lower(substring(CITY,-1,1)) not in ('a','e','i','o','u')

- Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. 
  If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), 
  secondary sort them by ascending ID.
  
  select NAME from STUDENTS where MARKS > 75 order by SUBSTRING(NAME,-3,3), ID

- Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

select NAME from EMPLOYEE order by NAME

- Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees 
  for less than  months. Sort your result by ascending employee_id.
  
  select NAME from EMPLOYEE where SALARY > 2000 and MONTHS < 10
  
- Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

  select sum(POPULATION) from CITY where COUNTRYCODE = 'JPN'
  
- Query the difference between the maximum and minimum populations in CITY.

  select max(POPULATION) - min(POPULATION) from CITY
  
- Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's  
  key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeroes removed), 
  and the actual average salary.
  Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer.
  
  select ceil(avg(SALARY) - avg(replace(SALARY, 0, ''))) from EMPLOYEES

- We define an employee's total earnings to be their monthly  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. 
  Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. 
  Then print these values as  space-separated integers.
  
  select (salary * months)as earnings ,count(*) from employee group by 1 order by earnings desc limit 1;

- Query the following two values from the STATION table:
    -The sum of all values in LAT_N rounded to a scale of  decimal places.
    -The sum of all values in LONG_W rounded to a scale of  decimal places.
    
  select round(sum(LAT_N),2), round(sum(LONG_W),2) from STATION
  
- Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than  and less than . Truncate your answer to  decimal places.
  
  select round(sum(LAT_N),4) from STATION where LAT_N > 38.7880 and LAT_N < 137.2345

- Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than . Truncate your answer to  decimal places.

  select round(max(LAT_N),4) from STATION where LAT_N < 137.2345
  
- Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than . Round your answer to  decimal places.

  select round(LONG_W,4) from STATION where LAT_N < 137.2345 order by LAT_N desc limit 1
  (OR)
  select round(LONG_W, 4) from STATION where LAT_N = (select max(LAT_N) from STATION where LAT_N < 137.2345)
  
- Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

    Equilateral: It's a triangle with  sides of equal length.
    Isosceles: It's a triangle with  sides of equal length.
    Scalene: It's a triangle with  sides of differing lengths.
    Not A Triangle: The given values of A, B, and C don't form a triangle.
  
  SELECT CASE             
            WHEN A + B > C AND B + C > A AND A + C > B THEN
                CASE 
                    WHEN A = B AND B = C THEN 'Equilateral'
                    WHEN A = B OR B = C OR A = C THEN 'Isosceles'
                    ELSE 'Scalene'
                END
            ELSE 'Not A Triangle'
        END
FROM TRIANGLES


- Generate the following two result sets:

- Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
  Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

- There are a total of [occupation_count] [occupation]s.
  where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.

  Note: There will be at least two entries in the table for each type of occupation.

select concat(name,concat(
                            '(', 
                            concat(
                                    substr(occupation,1,1),
                                    ')'
                                    )
                            )
                ) 
    from occupations 
    order by name;

select concat('There are a total of',
              concat(' ',
                     concat(count(occupation),
                            concat(' ',
                                   concat(lower(occupation),
                                          's.'
                                         )
                                  )
                           )
                    )
             ) as total from occupations
    group by occupation 
    order by total;

- Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.

- Note: Print NULL when there are no more names corresponding to an occupation.

  set @r1=0, @r2=0, @r3=0, @r4=0;
  select min(Doctor), min(Professor), min(Singer), min(Actor)
  from(
  select case when Occupation='Doctor' then (@r1:=@r1+1)
             when Occupation='Professor' then (@r2:=@r2+1)
             when Occupation='Singer' then (@r3:=@r3+1)
              when Occupation='Actor' then (@r4:=@r4+1) end as RowNumber,
      case when Occupation='Doctor' then Name end as Doctor,
      case when Occupation='Professor' then Name end as Professor,
      case when Occupation='Singer' then Name end as Singer,
      case when Occupation='Actor' then Name end as Actor
   from OCCUPATIONS
    order by Name
  ) Temp
  group by RowNumber

((OR))

MS SQL SERVER

  SELECT Doctor, Professor, Singer, Actor
  from
  (
    SELECT Name, Occupation,
     row_number() over(partition by Occupation order by Name) rn
    from Occupations
  ) as st
  pivot
  (
    max(Name)
    FOR Occupation in (Doctor, Professor, Singer, Actor)
  ) as pivottable

- You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
  Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

    Root: If node is root node.
    Leaf: If node is leaf node.
    Inner: If node is neither root nor leaf node.
    
   SELECT N, IF(P is Null,'Root',
                IF((SELECT count(*) from BST
                        WHERE P = B.N) > 0, 'Inner','Leaf'
                  )
            )
            FROM BST as B
            ORDER BY N;
          
 - Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, 
    total number of managers, and total number of employees. Order your output by ascending company_code.
 
 
  SELECT E.company_code, 
          C.founder, 
          COUNT(distinct lead_manager_code), 
          COUNT(distinct senior_manager_code), 
          COUNT(distinct manager_code), 
          COUNT(distinct employee_code) 
                FROM Employee E 
                  inner join 
                    Company C 
                      ON E.company_code = C.company_code 
      GROUP BY E.company_code, C.founder 
      ORDER BY E.company_code
            
            
- Query a count of the number of cities in CITY having a Population larger than 100,000.

  select count(NAME) from CITY where POPULATION > 100000;
  
- Query the total population of all cities in CITY where District is California.

  select sum(POPULATION) from CITY where DISTRICT = 'California';
  
- Query the average population of all cities in CITY where District is California.

  select AVG(POPULATION) from CITY where district = 'California';
  
- Query the average population for all cities in CITY, rounded down to the nearest integer.
  
  select ROUND(AVG(POPULATION),0) from CITY; 
  
- Query the smallest Northern Latitude (LAT_N) from STATION that is greater than . Round your answer to  decimal places.

  select round(min(LAT_N),4) from STATION where LAT_N > 38.7780;
  
- Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than . Round your answer to  decimal places.
  
  SELECT ROUND(long_w, 4)
        FROM station
        WHERE lat_n in (
                          SELECT min(lat_n) 
                                FROM station
                                WHERE lat_n > 38.7780
                        );

- Consider  and  to be two points on a 2D plane.

    a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
    b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
    c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
    d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
   Query the Manhattan Distance between points  and  and round it to a scale of  decimal places.
   
  SELECT ROUND(ABS(MIN(lat_n) - MAX(lat_n))+ABS(MIN(long_w) - MAX(long_w)), 4)
      FROM station;
      
- Consider  and  to be two points on a 2D plane where  are the respective minimum and maximum values of Northern Latitude (LAT_N) and  are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.

  Query the Euclidean Distance between points  and  and format your answer to display  decimal digits.
  
   SELECT
      ROUND(
              SQRT(
                    POWER(MAX(LAT_N)  - MIN(LAT_N),  2)
                    + 
                    POWER(MAX(LONG_W) - MIN(LONG_W), 2)
                    ), 4
             )
    FROM 
    STATION;
    
  - A median is defined as a number separating the higher half of a data set from the lower half. 
    Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to  decimal places.
    
    ORACLE -
    
    SELECT ROUND(MEDIAN(LAT_N),4)
    FROM station;
    
    MS SQL SERVER -
    
    select cast(AVG(lat_n) as numeric(14,4)) from
    (
      select *, ROW_NUMBER() over (order by lat_n desc) as desc_lat,
                ROW_NUMBER() over (order by lat_n asc) as asc_lat
    from station
    ) as a
      where asc_lat in (desc_lat, desc_lat+1, desc_lat-1)

MYSQL -

set @rowindex := -1;

select ROUND(AVG(l.lat_n),4)
    from(
            select @rowindex := @rowindex + 1 as rowindex, 
                    lat_n 
                from station
                order by lat_n
            ) as l
    where rowindex in (FLOOR(@rowindex/2), CEIL(@rowindex/2));
    
  logic explanation - https://www.eversql.com/how-to-calculate-median-value-in-mysql-using-a-simple-sql-query/

- You are given a table, Projects, containing three columns: Task_ID, Start_Date and End_Date. 
  It is guaranteed that the difference between the End_Date and the Start_Date is equal to 1 day for each row in the table.
  If the End_Date of the tasks are consecutive, then they are part of the same project. Samantha is interested in finding the total number of different projects completed.

  Write a query to output the start and end dates of projects listed by the number of days it took to complete the project in ascending order. 
  If there is more than one project that have the same number of completion days, then order by the start date of the project.
  
  SELECT Start_Date, MIN(End_Date) 
    FROM
        (
        SELECT Start_Date 
        FROM Projects 
        WHERE Start_Date not in (
                                    SELECT End_Date FROM Projects
                                ) 
            )AS S,
        (
        SELECT End_Date 
        FROM Projects
        WHERE End_Date not in (
                                    SELECT Start_Date FROM Projects
                                ) 
            )AS E
    WHERE Start_Date < End_Date
    GROUP BY Start_Date
    ORDER BY DATEDIFF(MIN(End_Date), Start_Date), Start_Date;
  
- Logic Explanation - https://nifannn.github.io/2017/10/24/SQL-Notes-Hackerrank-Projects/

- You are given three tables: Students, Friends and Packages. Students contains two columns: ID and Name. 
  Friends contains two columns: ID and Friend_ID (ID of the ONLY best friend). Packages contains two columns: ID and Salary (offered salary in $ thousands per month).
  
  Write a query to output the names of those students whose best friends got offered a higher salary than them. 
  Names must be ordered by the salary amount offered to the best friends. It is guaranteed that no two students got same salary offer.
  
  SELECT S.Name 
    FROM 
         Students S, 
         Friends F, 
         Packages P, 
         Packages P2 
    WHERE 
            S.ID = F.ID 
        AND F.Friend_ID= P2.ID 
        AND S.ID = P.ID 
        AND P.Salary < P2.salary 
    ORDER BY P2.Salary;
    
 - Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1.
   Write a query to output all such symmetric pairs in ascending order by the value of X. List the rows such that X1 ≤ Y1.
   
  (
    SELECT f1.X, f1.Y 
        FROM Functions AS f1 
        WHERE f1.X = f1.Y GROUP BY f1.X, f1.Y HAVING COUNT(*) > 1)
UNION
(
    SELECT f1.X, f1.Y 
        FROM Functions AS f1
        WHERE EXISTS(SELECT X, Y 
                        FROM Functions 
                        WHERE f1.X = Y AND f1.Y = X AND f1.X < X
                    )
)
    ORDER BY X;

- P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
  Write a query to print the pattern P(20).
  
  SET @number = 21;
  SELECT REPEAT('* ', @number := @number - 1) FROM information_schema.tables LIMIT 20;
  
- P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
  Write a query to print the pattern P(20).
  
  SET @number = 0;
  SELECT REPEAT('* ', @number := @number + 1) FROM information_schema.tables LIMIT 20;
  
  - Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.
    Note: CITY.CountryCode and COUNTRY.Code are matching key columns.
    
    SELECT SUM(C.Population) 
    FROM CITY C
        LEFT JOIN 
        COUNTRY CO
    ON C.Countrycode = CO.Code
    WHERE CO.Continent = 'Asia';
    
    ((or))
    
    SELECT SUM(CITY.POPULATION) 
      FROM CITY, COUNTRY
      WHERE CITY.COUNTRYCODE = COUNTRY.CODE AND COUNTRY.CONTINENT = 'Asia';
      
    ((or))
    
    SELECT SUM(CITY.POPULATION) 
    FROM CITY
    WHERE Countrycode in (
                            SELECT CODE 
                                FROM COUNTRY
                                WHERE CONTINENT = 'Asia'
                           );
- Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
  Note: CITY.CountryCode and COUNTRY.Code are matching key columns.
  
    SELECT  C.Name
      FROM CITY C
    LEFT JOIN 
           COUNTRY CO
    ON C.Countrycode = CO.Code
    WHERE CO.Continent = 'Africa';  
    
    ((OR))
    
    SELECT  C.Name
    FROM CITY C,
         COUNTRY CO
    WHERE C.Countrycode = CO.Code
    AND CO.Continent = 'Africa';
    
    ((OR))
    
    SELECT  Name
    FROM CITY C 
    WHERE COUNTRYCODE IN (
                            SELECT Code
                                FROM COUNTRY
                                WHERE CONTINENT = 'Africa'
                            );
- Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.
  Note: CITY.CountryCode and COUNTRY.Code are matching key columns.


    SELECT CO.Continent, FLOOR(AVG(C.Population))
      FROM City C
      INNER JOIN 
          Country CO
      ON C.Countrycode = CO.Code
      GROUP BY CO.Continent;
      
  NOTE - I do not know the reason why ROUND function do not work here.

- You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks.
  Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. 
  The report must be in descending order by grade -- i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order 
  those particular students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. 
  If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.
  Write a query to help Eve.
  
  SELECT IF(Grade < 8, Null, Name), Grade, Marks
    FROM 
        Students 
    JOIN
         Grades
    WHERE Marks BETWEEN Min_Mark AND Max_Mark
    ORDER BY Grade DESC, Name, Marks;
    
      ((OR))
      
    SELECT STUDENTS.Name, GRADES.Grade, STUDENTS.Marks
      FROM STUDENTS
      LEFT JOIN
           GRADES
      ON Students.Marks BETWEEN Grades.Min_Mark AND Grades.Max_Mark 
      WHERE GRADES.Grade > 7
      ORDER BY GRADES.Grade DESC, STUDENTS.Name;
    
    SELECT Null, GRADES.Grade, STUDENTS.Marks
      FROM STUDENTS
      LEFT JOIN
           GRADES
      ON Students.Marks BETWEEN Grades.Min_Mark AND Grades.Max_Mark 
      WHERE GRADES.Grade <= 7
      ORDER BY GRADES.Grade DESC, STUDENTS.Marks;

      ((OR))
      
      SELECT IF(GRADE <8, Null, STUDENTS.Name), GRADES.Grade, STUDENTS.Marks
    FROM STUDENTS
    INNER JOIN
        GRADES
    ON STUDENTS.Marks BETWEEN GRADES.Min_Mark AND GRADES.Max_Mark
    ORDER BY GRADES.Grade DESC, STUDENTS.Name, STUDENTS.Marks;
    
     ((OR))
     
    SELECT CASE WHEN GRADES.GRADE > 7
            THEN STUDENTS.Name
            WHEN GRADES.GRADE <= 7
            THEN Null
            END,
            GRADES.Grade, 
            STUDENTS.Marks
    FROM STUDENTS
    INNER JOIN
        GRADES
    ON STUDENTS.Marks BETWEEN GRADES.Min_Mark AND GRADES.Max_Mark
    ORDER BY GRADES.Grade DESC, STUDENTS.Name, STUDENTS.Marks;

- Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers 
  who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. 
  If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.
  
  SELECT H.Hacker_ID, H.Name
    FROM SUBMISSIONS S
        INNER JOIN  
            CHALLENGES C
        ON S.Challenge_ID = C.Challenge_ID
        INNER JOIN DIFFICULTY D
        ON C.Difficulty_Level = D.Difficulty_Level
        INNER JOIN HACKERS H
        ON S.Hacker_ID = H.Hacker_ID
    WHERE S.Score = D.Score 
    GROUP BY H.Hacker_ID, H.Name
        HAVING COUNT(S.Hacker_ID) > 1
    ORDER BY COUNT(S.Hacker_ID) DESC, S.Hacker_ID;
    
- Olivander's Inventory
  Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.
  Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. 
  Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. 
  If more than one wand has same power, sort the result in order of descending age.

  SELECT w.id, p.age, m.coins_needed, m.power
  FROM
      (
          SELECT code, power, min(coins_needed) as coins_needed
              FROM Wands
             GROUP BY code, power
      ) as m
  INNER JOIN
      Wands as w
  ON m.code = w.code
  AND m.power = w.power
  AND m.coins_needed = w.coins_needed
  INNER JOIN 
     Wands_Property as p
  ON m.code = p.code
  WHERE p.is_evil = 0
  ORDER BY m.power DESC, p.age DESC;

- Julia asked her students to create some coding challenges. 
  Write a query to print the hacker_id, name, and the total number of challenges created by each student. Sort your results by the total number of challenges in 
  descending order. If more than one student created the same number of challenges, then sort the result by hacker_id. If more than one student created the same number of 
  challenges and the count is less than the maximum number of challenges created, then exclude those students from the result.
  
  SELECT C.Hacker_ID, 
         H.Name, 
         COUNT(C.Hacker_ID) as C_Count
    FROM Challenges C
    INNER JOIN Hackers H
    ON C.Hacker_ID = H.Hacker_ID
    GROUP BY C.Hacker_ID, H.Name
    HAVING C_Count =
                    (
                      SELECT MAX(Temp1.Cnt) 
                          FROM (
                                  SELECT Hacker_ID,
                                         COUNT(Hacker_ID) as Cnt
                                  FROM Challenges
                                  GROUP BY Hacker_ID
                                  ORDER BY Hacker_ID
                                )Temp1
                    )
OR C_COUNT IN 
                (
                   SELECT T.Cnt FROM
                       (SELECT Hacker_ID, 
                               COUNT(*) as Cnt
                            FROM Challenges
                            GROUP BY Hacker_ID
                          )T
                      GROUP BY T.Cnt
                      HAVING COUNT(T.Cnt) = 1
                    )
  ORDER BY C_Count DESC, 
           C.Hacker_ID;

- You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too!
  The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, 
  name, and total score of the hackers ordered by the descending score. If more than one hacker achieved the same total score, then 
  sort the result by ascending hacker_id. Exclude all hackers with a total score of  from your result.
  
  SELECT H.Hacker_ID,
         H.Name,
         SUM(Max_Score.Score) AS Total_Score
  FROM Hackers H
  INNER JOIN 
      (
          SELECT Hacker_ID,  
                  MAX(Score) as Score
          FROM Submissions S
          GROUP BY Hacker_ID, 
                    Challenge_ID
        )Max_Score
  ON H.Hacker_ID = Max_Score.Hacker_ID
  GROUP BY H.Hacker_ID, H.Name
  HAVING Total_Score > 0
  ORDER BY Total_Score DESC, H.Hacker_ID;

- Print Prime Numbers
  Write a query to print all prime numbers less than or equal to . 
  Print your result on a single line, and use the ampersand () character as your separator (instead of a space).
  For example, the output for all prime numbers  would be:
  
  // ORACLE - Code not working
  
    SET SERVEROUTPUT ON;
  DECLARE
      COUNTER NUMBER;
      OUTPUT CLOB;
      K NUMBER;
  BEGIN
      FOR n in 2 .. 1000 LOOP
          COUNTER := 0;
          k := floor(n/2);
          FOR i in 2 .. k LOOP
              IF (mod(n,i) = 0) THEN
                  COUNTER := 1;
              END IF;
          END LOOP;
          IF(COUNTER = 0) THEN
              OUTPUT := OUTPUT || n || '&';
          END IF;
      END LOOP;
      DBMS_OUTPUT.PUT_LINE(SUBSTR(OUTPUT, 1, length(OUTPUT) - 1));
  END;
  
  ((or))
  
      DECLARE @table TABLE (PrimeNumber INT)
      DECLARE @final AS VARCHAR(1500)
          SET @final = ''
      DECLARE @counter INT
          SET @counter = 2
      WHILE @counter <= 1000
      BEGIN
          IF NOT EXISTS 
          (
                SELECT PrimeNumber
                FROM @table
                WHERE @counter % PrimeNumber = 0)
              BEGIN 
                  INSERT INTO @table SELECT @counter
                  SET @final = @final + CAST(@counter AS VARCHAR(20))+'&' 
              END
          SET @counter = @counter + 1
          END
      SELECT SUBSTRING(@final,0,LEN(@final)
        )
- User Activity for the Past 30 Days II
  Write an SQL query to find the average number of sessions per user for a period of 30 days ending 2019-07-27 inclusively, rounded to 2 decimal places. 
  The sessions we want to count for a user are those with at least one activity in that time period.
  
  SELECT ROUND(IFNULL(AVG(session_count),0),2) AS average_sessions_per_user
  FROM
  (
      SELECT COUNT(DISTINCT(session_id)) AS session_count
          FROM Activity
          WHERE activity_date BETWEEN DATE_SUB("2019-07-27", INTERVAL 29 DAY) AND "2019-07-27"
          GROUP BY user_id
      )temp;
  
- Classes More Than 5 Students
  There is a table courses with columns: student and class
  Please list out all classes which have more than or equal to 5 students.
  
  SELECT class
FROM
(
    SELECT class, COUNT(DISTINCT student)
        FROM courses
        GROUP BY class
        HAVING COUNT(DISTINCT student) >= 5
     )temp;

   ((OR))
   
       SELECT class
        FROM courses
        GROUP BY class
        HAVING COUNT(DISTINCT student) >= 5;
        
- 197. Rising Temperature
    Write an SQL query to find all dates' id with higher temperature compared to its previous dates (yesterday).
    Return the result table in any order.
    
    SELECT id 
FROM
(
    SELECT id, 
            recordDate, 
            temperature, 
            LAG(recordDate) OVER(ORDER BY recordDate) AS yday_rec_date,
            LAG(temperature) OVER(ORDER BY recordDate) AS yday_temp
        FROM weather
    )temp
    WHERE temperature > yday_temp and datediff(recordDate, yday_rec_date) = 1;
