- Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

select NAME from CITY 
where COUNTRYCODE = 'USA' and POPULATION > 120000

- Query all columns (attributes) for every row in the CITY table.

select * from CITY

- Query all columns for a city in CITY with the ID 1661.

select * from CITY where ID = 1661

- Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

select * from CITY where COUNTRYCODE = 'JPN'

- Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.

select NAME from CITY where COUNTRYCODE = 'JPN'

- Query a list of CITY and STATE from the STATION table.

select CITY, STATE from STATION

- Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

select distinct CITY from STATION where ID%2 = 0

- Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

select count(CITY) - count(distinct CITY) from STATION

- Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). 
  If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

-
select CITY, length(CITY)
    from STATION
    order by length(CITY), CITY limit 1;
    
select CITY, length(CITY)
    from STATION
    order by length(CITY) desc, CITY asc limit 1;
    
    (OR)
    
    ****ORACLE***
    
    select * from
    (
      select CITY, length(CITY)
        from STATION
        order by length(CITY), CITY) 
       where ROWNUM = 1
            union
    select * from 
    (
      select CITY, length(CITY)
        from STATION
        order by length(CITY) desc, CITY) 
       where ROWNUM = 1;

- Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY,1,1)) in ('a','e','i','o','u')

- Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY, -1, 1) in ('a','e','i','o','u'))

- Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY,1,1)) in ('a','e','i','o','u') and lower(substring(CITY,-1,1)) in ('a','e','i','o','u')

- Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY,1,1)) not in ('a','e','i','o','u')

- Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY,-1,1)) not in ('a','e','i','o','u') 

- Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY,1,1)) not in ('a','e','i','o','u') or lower(substring(CITY,-1,1)) not in ('a','e','i','o','u')

- Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

select distinct CITY from STATION where lower(substring(CITY,1,1)) not in ('a','e','i','o','u') and lower(substring(CITY,-1,1)) not in ('a','e','i','o','u')

- Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. 
  If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), 
  secondary sort them by ascending ID.
  
  select NAME from STUDENTS where MARKS > 75 order by SUBSTRING(NAME,-3,3), ID

- Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

select NAME from EMPLOYEE order by NAME

- Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees 
  for less than  months. Sort your result by ascending employee_id.
  
  select NAME from EMPLOYEE where SALARY > 2000 and MONTHS < 10
  
- Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

  select sum(POPULATION) from CITY where COUNTRYCODE = 'JPN'
  
- Query the difference between the maximum and minimum populations in CITY.

  select max(POPULATION) - min(POPULATION) from CITY
  
- Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's  
  key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeroes removed), 
  and the actual average salary.
  Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer.
  
  select ceil(avg(SALARY) - avg(replace(SALARY, 0, ''))) from EMPLOYEES

- We define an employee's total earnings to be their monthly  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. 
  Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. 
  Then print these values as  space-separated integers.
  
  select (salary * months)as earnings ,count(*) from employee group by 1 order by earnings desc limit 1;

- Query the following two values from the STATION table:
    -The sum of all values in LAT_N rounded to a scale of  decimal places.
    -The sum of all values in LONG_W rounded to a scale of  decimal places.
    
  select round(sum(LAT_N),2), round(sum(LONG_W),2) from STATION
  
- Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than  and less than . Truncate your answer to  decimal places.
  
  select round(sum(LAT_N),4) from STATION where LAT_N > 38.7880 and LAT_N < 137.2345

- Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than . Truncate your answer to  decimal places.

  select round(max(LAT_N),4) from STATION where LAT_N < 137.2345
  
- Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than . Round your answer to  decimal places.

  select round(LONG_W,4) from STATION where LAT_N < 137.2345 order by LAT_N desc limit 1
  (OR)
  select round(LONG_W, 4) from STATION where LAT_N = (select max(LAT_N) from STATION where LAT_N < 137.2345)
  
- Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

    Equilateral: It's a triangle with  sides of equal length.
    Isosceles: It's a triangle with  sides of equal length.
    Scalene: It's a triangle with  sides of differing lengths.
    Not A Triangle: The given values of A, B, and C don't form a triangle.
  
  SELECT CASE             
            WHEN A + B > C AND B + C > A AND A + C > B THEN
                CASE 
                    WHEN A = B AND B = C THEN 'Equilateral'
                    WHEN A = B OR B = C OR A = C THEN 'Isosceles'
                    ELSE 'Scalene'
                END
            ELSE 'Not A Triangle'
        END
FROM TRIANGLES


- Generate the following two result sets:

- Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
  Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

- There are a total of [occupation_count] [occupation]s.
  where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.

  Note: There will be at least two entries in the table for each type of occupation.

select concat(name,concat(
                            '(', 
                            concat(
                                    substr(occupation,1,1),
                                    ')'
                                    )
                            )
                ) 
    from occupations 
    order by name;

select concat('There are a total of',
              concat(' ',
                     concat(count(occupation),
                            concat(' ',
                                   concat(lower(occupation),
                                          's.'
                                         )
                                  )
                           )
                    )
             ) as total from occupations
    group by occupation 
    order by total;

- Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.

- Note: Print NULL when there are no more names corresponding to an occupation.

  set @r1=0, @r2=0, @r3=0, @r4=0;
  select min(Doctor), min(Professor), min(Singer), min(Actor)
  from(
  select case when Occupation='Doctor' then (@r1:=@r1+1)
             when Occupation='Professor' then (@r2:=@r2+1)
             when Occupation='Singer' then (@r3:=@r3+1)
              when Occupation='Actor' then (@r4:=@r4+1) end as RowNumber,
      case when Occupation='Doctor' then Name end as Doctor,
      case when Occupation='Professor' then Name end as Professor,
      case when Occupation='Singer' then Name end as Singer,
      case when Occupation='Actor' then Name end as Actor
   from OCCUPATIONS
    order by Name
  ) Temp
  group by RowNumber

((OR))

MS SQL SERVER

  SELECT Doctor, Professor, Singer, Actor
  from
  (
    SELECT Name, Occupation,
     row_number() over(partition by Occupation order by Name) rn
    from Occupations
  ) as st
  pivot
  (
    max(Name)
    FOR Occupation in (Doctor, Professor, Singer, Actor)
  ) as pivottable

- You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
  Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

    Root: If node is root node.
    Leaf: If node is leaf node.
    Inner: If node is neither root nor leaf node.
    
   SELECT N, IF(P is Null,'Root',
                IF((SELECT count(*) from BST
                        WHERE P = B.N) > 0, 'Inner','Leaf'
                  )
            )
            FROM BST as B
            ORDER BY N;
          
 - Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, 
    total number of managers, and total number of employees. Order your output by ascending company_code.
 
 
  SELECT E.company_code, 
          C.founder, 
          COUNT(distinct lead_manager_code), 
          COUNT(distinct senior_manager_code), 
          COUNT(distinct manager_code), 
          COUNT(distinct employee_code) 
                FROM Employee E 
                  inner join 
                    Company C 
                      ON E.company_code = C.company_code 
      GROUP BY E.company_code, C.founder 
      ORDER BY E.company_code
            
            
- Query a count of the number of cities in CITY having a Population larger than 100,000.

  select count(NAME) from CITY where POPULATION > 100000;
  
- Query the total population of all cities in CITY where District is California.

  select sum(POPULATION) from CITY where DISTRICT = 'California';
  
- Query the average population of all cities in CITY where District is California.

  select AVG(POPULATION) from CITY where district = 'California';
  
- Query the average population for all cities in CITY, rounded down to the nearest integer.
  
  select ROUND(AVG(POPULATION),0) from CITY; 
  
- Query the smallest Northern Latitude (LAT_N) from STATION that is greater than . Round your answer to  decimal places.

  select round(min(LAT_N),4) from STATION where LAT_N > 38.7780;
  
- Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than . Round your answer to  decimal places.
  
  SELECT ROUND(long_w, 4)
        FROM station
        WHERE lat_n in (
                          SELECT min(lat_n) 
                                FROM station
                                WHERE lat_n > 38.7780
                        );

- Consider  and  to be two points on a 2D plane.

    a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
    b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
    c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
    d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
   Query the Manhattan Distance between points  and  and round it to a scale of  decimal places.
   
  SELECT ROUND(ABS(MIN(lat_n) - MAX(lat_n))+ABS(MIN(long_w) - MAX(long_w)), 4)
      FROM station;
      
- Consider  and  to be two points on a 2D plane where  are the respective minimum and maximum values of Northern Latitude (LAT_N) and  are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.

  Query the Euclidean Distance between points  and  and format your answer to display  decimal digits.
  
   SELECT
      ROUND(
              SQRT(
                    POWER(MAX(LAT_N)  - MIN(LAT_N),  2)
                    + 
                    POWER(MAX(LONG_W) - MIN(LONG_W), 2)
                    ), 4
             )
    FROM 
    STATION;
    
  - A median is defined as a number separating the higher half of a data set from the lower half. 
    Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to  decimal places.
    
    ORACLE -
    
    SELECT ROUND(MEDIAN(LAT_N),4)
    FROM station;
    
    MS SQL SERVER -
    
    select cast(AVG(lat_n) as numeric(14,4)) from
    (
      select *, ROW_NUMBER() over (order by lat_n desc) as desc_lat,
                ROW_NUMBER() over (order by lat_n asc) as asc_lat
    from station
    ) as a
      where asc_lat in (desc_lat, desc_lat+1, desc_lat-1)
