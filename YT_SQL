#Transaction_tbl has 4 columns- CustID, TranID, TranAmt and TranDate.
#User has to display all these fields along with maximum TranAmt for each CustID and ratio of TranAmt and Maximum TranAmt for each transaction

#Using Subquery

SELECT A.CustID, 
        A.TranID, 
        A.TranAmt, 
        B.MaxTranAmt, 
        A.TranDate, 
        (A.TranAmt/B.MaxTranAmt) AS Ratio
  FROM Transaction_Tbl A
  INNER JOIN
  (
    SELECT CustID, MAX(TranAmt) AS MaxTranAmt
      FROM Transaction_Tbl
      GROUP BY CustID
      )B
  ON A.CustID = B.CustID;

#Using CTE

WITH CTE(CustID, TranID, TranAmt, TranDate) AS
(
        SELECT CustID, TranID, TranAmt, MaxTranAmt, TranDate
                FROM Transaction_Tbl
                ),
WITH CTE_MaxTran(CustID, MaxTranAmt) AS(
                                                SELECT CustID, MAX(TranAmt) as MaxTranAmt
                                                        FROM Transaction_Tbl
                                                        GROUP BY CustID
                                                )
SELECT A.CustID, 
        A.TranID, 
        A.TranAmt, 
        B.MaxTranAmt, 
        A.TranDate, 
        (A.TranAmt/B.MaxTranAmt) AS Ratio                                           
   FROM CTE A
   INNER JOIN CTE_MaxTran B
   ON A.CustID = B.CustID;

# EMP - Group, Sequence
# Output - Group, Min_Seq, Max_Seq

        Group   Sequence
  1     A       1
  2     A       2
  3     A       3
  4     A       5
  5     A       6
  6     A       8
  7     A       9
  8     B       11
  9     C       1
  10    C       2
  11    C       3
  
  
  OUTPUT -
  
        Group   Min_Seq         Max_Seq
    1   A       1               3
    2   A       5               6
    3   A       8               9
    4   B       11              11
    5   c       1               3
    
    Step 1 -
    
    SELECT Group,
           Sequence,
           ROW_NUMBER() OVER(PARTITION BY Group ORDER BY Sequence) AS rnk
    FROM EMP;
    
        Group   Sequence        rnk
     1     A       1            1
     2     A       2            2
     3     A       3            3
     4     A       5            4
     5     A       6            5
     6     A       8            6
     7     A       9            7
     8     B       11           1
     9     C       1            1
     10    C       2            2
     11    C       3            3
     
     Step 2 -
     
    SELECT Group,
           Sequence,
           ROW_NUMBER() OVER(PARTITION BY Group ORDER BY Sequence) AS rnk,
           Sequence - ROW_NUMBER() OVER(PARTITION BY Group ORDER BY Sequence) AS split
        FROM EMP;
        
        
        Group   Sequence       rnk      split
     1     A       1            1         0
     2     A       2            2         0
     3     A       3            3         0
     4     A       5            4         1
     5     A       6            5         1
     6     A       8            6         2
     7     A       9            7         2
     8     B       11           1         10
     9     C       1            1         0
     10    C       2            2         0
     11    C       3            3         0
     
     #FINAL
     
     SELECT Group,
            MIN(Sequence) AS MIN_Seq
            MAX(Sequence) AS MAX_Seq
        FROM
           (
            SELECT Group, 
                   Sequence,
                   Sequence - ROW_NUMBER() OVER(PARTITION BY Group ORDER BY Sequence) AS grp_split
                FROM EMP)
        GROUP BY Group, Split
        ORDER BY Group;

#Student table has 3 columns - student_name, total_marks, year
#User has to write a SQL query to display student_name, total_marks, year, prev_yr_marks for those whose total_marks are greater than or equal to previous year

INPUT - SELECT * FROM Student;

        Student_Name    Total_Marks     Year
  1     Rahul           90              2010
  2     Sanjay          80              2010
  3     Mohan           70              2010
  4     Rahul           90              2011
  5     Sanjay          85              2011
  6     Mohan           65              2011
  7     Rahul           80              2012
  8     Sanjay          80              2012
  9     Mohan           90              2012
  
  OUTPUT -
  
  Student_Name  Total_Marks     Year    Prev_Yr_Marks
  Rahul         90              2011    90
  Sanjay        85              2011    80
  Mohan         90              2012    65
  
  STEP - 1
  
  SELECT Student_Name, 
         Year, 
         Total_Marks,
         LAG(Total_Marks) OVER(PARTITION BY Student_Name ORDER BY Year) AS Prev_Yr_Marks
  FROM Student;
  
        Student_Name          Year            Total_Marks     Prev_Yr_Marks
   1    Mohan                   2010            70              NULL
   2    Mohan                   2011            65              70
   3    Mohan                   2012            90              65
   4    Rahul                   2010            90              NULL
   5    Rahul                   2011            90              90
   6    Rahul                   2012            80              90     
   7    Sanjay                  2010            80              NULL
   8    Sanjay                  2011            85              80
   9    Sanjay                  2012            80              85
  
  STEP 2 -
  
  SELECT Student_Name,
         Year,
         Total_Marks,
         Prev_Yr_Marks,
         CASE WHEN Total_Marks >= Prev_Yr_Marks THEN 1 ELSE 0 END AS Flag
  FROM
  (
    SELECT Student_Name, 
         Year, 
         Total_Marks,
         LAG(Total_Marks) OVER(PARTITION BY Student_Name ORDER BY Year) AS Prev_Yr_Marks
        FROM Student
        )A
        
  
        Student_Name          Year            Total_Marks     Prev_Yr_Marks     Flag
   1    Mohan                   2010            70              NULL            0
   2    Mohan                   2011            65              70              0
   3    Mohan                   2012            90              65              1
   4    Rahul                   2010            90              NULL            0
   5    Rahul                   2011            90              90              1
   6    Rahul                   2012            80              90              0
   7    Sanjay                  2010            80              NULL            0
   8    Sanjay                  2011            85              80              1
   9    Sanjay                  2012            80              85              0
   
   #Final Step -
   
  SELECT Student_Name,
         Total_Marks,
         Year,
         Prev_Yr_Marks
     FROM
     (
        SELECT Student_Name,
                Year,
                Total_Marks,
                Prev_Yr_Marks,
                CASE WHEN Total_Marks >= Prev_Yr_Marks THEN 1 ELSE 0 END AS Flag
            FROM
            (
                SELECT Student_Name, 
                        Year, 
                        Total_Marks,
                        LAG(Total_Marks) OVER(PARTITION BY Student_Name ORDER BY Year) AS Prev_Yr_Marks
                     FROM Student
                )A
           )B
           WHERE Flag = 1;

#Product's Price for each store

#Products Table

Product_id      Store           Price
0               Store 1         95
0               Store 3         105
0               Store 2         100
1               Store 1         70
1               Store 3         80

#Output

Product_id      Store1          Store2          Store3
0               95              100             105
1               70              Null            80

SELECT P1.Product_id.
        P2.Price AS Store1,
        P3.Price AS Store2,
        p4.Price AS Store3
   FROM Products P1
   LEFT JOIN Products P2 ON P1.product_id = P2.product_id AND P2.Store = 'Store1'
   LEFT JOIN Products P3 ON P1.product_id = P3.product_id AND P2.Store = 'Store2'
   LEFT JOIN Products P4 ON P1.product_id = P4.product_id AND P4.Store = 'Store3'
   GROUP BY P1.Product_id
   ORDER BY P1.Product_id;

((OR))

SELECT Product_id,
        MAX(CASE WHEN store ='Store1' THEN Price END)AS Store1,
        MAX(CASE WHEN store ='Store2' THEN Price END)AS Store2,
        MAX(CASE WHEN store ='Store3' THEN Price END)AS Store3
   FROM Products P
   GROUP BY product_id
   ORDER BY Product_id;

#Using Pivot function. This works only in MS SQL SERVER

SELECT Product_id, [Store1], [Store2], [Store3]
        FROM Products
        PIVOT(
                MAX(Price)
                FOR Store IN ([Store1], [Store2], [Store3])
                )AS PivotTable

#Rearrange Products Table

Products  -

Product_id      Store1  Store2  Store3

0               95      100     105
1               70      Null    80


Output -

Product_id      Store   Price

0               Store1  95
0               Store2  100
0               Store3  105
1               Store1  70
1               Store3  80

(
SELECT Product_id,
       'Store1' AS Store,
       Store1 AS Price
   FROM Products
   WHERE Store1 IS NOT NULL
   )
UNION
(
SELECT Product_id,
        'Store2' AS Store,
        Store2 AS Price
    FROM Products
    WHERE Store2 IS NOT NULL
    )
UNION
(
SELECT Product_id,
        'Store3' AS Store
        Store3 AS Price
     FROM Products
     WHERE Store3 IS NOT NULL
     )
 ORDER BY 1,2;

((OR))

SELECT Product_id, 
        Store, 
        Price
     FROM Products
     UNPIVOT
     (
          Price
          FOR Store IN (Store1, Store2, Store3)
          )AS a

# Emp_Details table has four columns EmpID, Gender, EmailID and DeptID.
# User has to write a SQL Query to derive another column called Email_List to display all EmailID concatenated with semicolon associated with each Dept_ID as shown below in output table

INPUT - SELECT * FROM Emp_Details;

        EmpID          Gender           EmailID         DeptID
    1   1001            M               YYYY@gmail.com  104
    2   1002            M               ZZZ@gmail.com   103
    3   1003            F               AAAAA@gmail.com 102
    4   1004            F               PP@gmail.com    104
    5   1005            M               CCCC@yahoo.com  101
    6   1006            M               DDDDD@yahoo.com 100
    7   1007            F               E@yahoo.com     102
    8   1008            M               M@yahoo.com     102
    9   1009            F               SS@yahoo.com    100
    
    OUTPUT -
    
                DeptID          Email_List
          1     100             DDDDD@yahoo.com;SS@yahoo.com
          2     101             CCCC@yahoo.com
          3     102             AAAAA@gmail.com;E@yahoo.com;M@yahoo.com
          4     103             ZZZ@gmail.com
          5     104             PP@gmail.com;YYYY@gmail.com
  
  # Accomplished using STRING_AGG(EmailID,;)
  #STRING_AGG -> Used by SQL SERVER. In ORACLE, it is LIST_AGG() function
  
  SELECT DeptID,
         STRING_AGG(EmailID,;) WITHIN GROUP(ORDER BY EmailID) Email_List
      FROM Emp_Details
      GROUP BY DeptID;
          
    
#Order_Tbl has 4 columns namely Order_Day, Order_ID, Product_ID, Quantity and Price

        Order_Day       Order_ID        Product_ID      Quantity        Price
   1    2015-05-01      ODR1            PROD1           5               5
   2    2015-05-01      ODR2            PROD2           2               10
   3    2015-05-01      0DR3            PROD3           10              25
   4    2015-05-01      ODR4            PROD1           20              5
   5    2015-05-02      ODR5            PROD3           5               25
   6    2015-05-02      ODR6            PROD4           6               20
   7    2015-05-02      ODR7            PROD1           2               5
   8    2015-05-02      ODR8            PROD5           1               50
   9    2015-05-02      ODR9            PROD6           2               50
   10   2015-05-02      ODR10           PROD2           4               10


Problem Statements -

(a) Write a SQL to get all the products that got sold on both the days and the number of times the product is sold

        OUTPUT -
        
                Product_ID      Count
            1   PROD1           3
            2   PROD2           2
            3   PROD3           2
    
    SELECT Product_ID,
           Count
       FROM
          (
           SELECT Product_ID,
                  COUNT(DISTINCT Order_day),
                  COUNT(Product_ID) AS Count
               FROM Order_Tbl
               GROUP BY Product_ID
               HAVING COUNT(DISTINCT Order_Day) > 1
               )temp;


(b) Write a SQL to get products that was ordered on 02-May-2015 but not on 01-May-2015

SELECT DISTINCT Product_ID
   FROM Order_Tbl
   WHERE Order_Day = '2015-05-02'
   AND  Product_ID NOT IN
                     ( 
                        SELECT Product_ID
                            FROM Order_Tbl
                            WHERE Order_Day = '2015-05-01'
                           );
                           
#Using Join

#Step 1 -

SELECT A.Product_ID,
        B.Product_ID
   FROM
   (
        (SELECT Product_ID
            FROM Order_Tbl 
            WHERE Order_Day = '2015-05-02'
            )A
    LEFT JOIN 
         (SELECT Product_ID
             FROM Order_Tbl 
             WHERE Order_Day = '2015-05-01'
            )B
    ON A.Product_ID = B.Product_ID
        )
        
 Output -
 
        Product_ID      Product_ID
  1     PROD3           PROD3
  2     PROD4           NULL
  3     PROD1           PROD1
  4     PROD1           PROD1
  5     PROD5           NULL
  6     PROD6           NULL
  7     PROD2           PROD2
  
#Final_Query -

SELECT A.Product_ID,
   FROM
   (
        (SELECT Product_ID
            FROM Order_Tbl 
            WHERE Order_Day = '2015-05-02'
            )A
    LEFT JOIN 
         (SELECT Product_ID
             FROM Order_Tbl 
             WHERE Order_Day = '2015-05-01'
            )B
    ON A.Product_ID = B.Product_ID
        )
   WHERE B.Product_ID IS NULL
   
   
#Using Except Query -

SELECT Product_ID
    FROM Order_Tbl 
    WHERE Order_Day = '2015-05-02'
EXCEPT
SELECT Product_ID
    FROM Order_Tbl
    WHERE Order_Day = '2015-05-01'
   
(c) Write a SQL to get the highest sold product(Quantity*Price) in both the days

        ORDER_DAY       PRODUCT_ID      SOLD_AMOUNT
    1   2015-05-01      PROD3           250
    2   2015-05-02      PROD3           125
    
#Step 1 -

        SELECT Order_Day, MAX(Quantity * Price) AS Sold_Amount 
             FROM Order_Tbl
             GROUP BY Order_Day;
             
        Order_Day         Sold_Amount
  1     2015-05-01            250
  2     2015-05-02            125
  
We cannot add Product_ID here becauseif we add Product_ID in the SELECT clause it has to be also included in the GROUP BY clause.
If we include it in the GROUP BY clause we will not get our desired result.

Inorder to have our Product_ID in the SELECT clause or in the output table we will write another subquery where we will be selecting ORDER_DAY, PRODUCT_ID, (Quantity * Price) AS
Sold_Amount from the Order_Tbl.
So, this table will have all the data including Product_ID
  
#Step - 2
  
SELECT Order_Day, Product_ID, (Quantity*Price) AS Sold_Amount    
FROM Order_Tbl;
  
#Final Query -

SELECT A.Order_Day, B.Product_ID, A.Sold_Amount
   FROM
       (
        (
           SELECT Order_Day, MAX(Quantity * Price) AS Sold_Amount 
               FROM Order_Tbl
               GROUP BY Order_Day
               )A
        INNER JOIN
        (
           SELECT Order_Day, Product_ID, (Quantity*Price) AS Sold_Amount    
             FROM Order_Tbl
             )B
        ON A.Order_Day = B.Order_Day AND A.Sold_Amount = B.Sold_Amount
        );


#Write a SQL to get all product's total sales on 1st May and 2nd May adjacent to each other

        Product_id      Total_Sales_01          Total_Sales_02
    1   PROD1           125                     10
    2   PROD2           20                      40
    3   PROD3           250                     125
    4   PROD4           0                       120
    5   PROD5           0                       50
    6   PROD6           0                       100
    
 

